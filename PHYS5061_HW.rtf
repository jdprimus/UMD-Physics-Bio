{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12060\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 >> %% Jeremy Primus\
%% PHYS 5061 HW 5\
%Bevington 4.5\
P=[ 1.35 1.34 1.32 1.36 1.33 1.34 1.37 1.35];\
>> average=sum(P)/8 %determine average period\
\
average =\
\
    1.3450\
\
>> diff=P-average %difference of each measurement from the average\
\
diff =\
\
    0.0050   -0.0050   -0.0250    0.0150   -0.0150   -0.0050    0.0250    0.0050\
\
>> diff(n).^2; %squares of the differences\
\
>> stddev=sqrt((1/8)*sum(diffsq)) %calculates the standard deviation from formula 4.13 in Bevington\
\
stddev =\
\
    0.0150\
\
>> meandev=sqrt(stddev/8)%calculates the standard deviation of the mean from equation 4.23\
\
meandev =\
\
    0.0433\
\
>> fun = @(x) exp(-0.5*x.^2) %defines the Gaussian\
\
fun = \
\
    @(x)exp(-0.5*x.^2)\
\
>> x1=-0.02/stddev; x2=0.02/stddev;  %defines the limits of integration\
>> q=integral(fun, x1, x2) %integrates the gaussian function from x1 to x2\
\
q =\
\
    2.0494\
\
>> q/sqrt(2*pi) %normalizes the answer\
\
ans =\
\
    0.8176\
\
>> % 82% probability that the answer falls within 0.02s of the mean\
\
\
\
>> %4.7\
counts=[125 130 105 126 128 119 137 131 115 116];\
average=sum(counts)/10 %average count\
\
average =\
\
  123.2000\
\
>> diff=counts-average; %deviations in counts\
>> diffsq=diff.^2; %square deviations\
>> stddev=sqrt((1/9)*sum(diffsq)) %calculate standard deviation using eq 4.13 in Bevington\
\
stddev =\
\
    9.4257\
\
>> %the deviation in the mean is the stanard deviation/square of # of trials\
>> meandev=stddev/sqrt(10)\
\
meandev =\
\
    2.9807\
\
>> %background\
>> meanback=58/5\
\
meanback =\
\
   11.6000\
\
>> %assuming a Poisson distribution, the standard deviation is the square root of the mean\
>> %the deviation in the mean is the stanard deviation/square of # of trials\
>> meanbackdev=sqrt(meanback/5)\
\
meanbackdev =\
\
    1.5232\
\
>> %so mean background is 11.6/min with uncertainty of 1.5\
>> %b correction\
>> corrected=average-meanback\
\
corrected =\
\
  111.6000\
\
>> %the standard deviations need to be combined\
>> dev=sqrt(meandev^2+meanbackdev^2)\
\
dev =\
\
    3.3473\
\
>> %so the average corrected count is 111.6 +/- 3.3 /min\
\
\
\
\
>>  %Bevington 6.4\
x=[2:2:24]; %initialize x values\
y=[5.3 14.4 20.7 30.1 35 41.3 52.7 55.7 63 72.1 80.5 87.9]; %initialize y values\
b=sum(y)/sum(x)\
\
b =\
\
    3.5814\
\
>> ki=((1/1.5)*(y-b*x)).^2; %determining Chi squared from b\
>> sum(ki)\
\
ans =\
\
   12.3876\
\
>> %using the least squares fit for the formula y = bx, b was determined to be 3.6 with a chi-squared value of 12.4\
\
>>%problem 4\
>> t=[0.05:0.05:0.30]; % initialize time values\
x=0.01*[9.7 21.9 36.7 53.6 73 94.7]; %initialize position values\
y=x./t;\
>> % using a linear least squares fit, the curve fit tool fit the data and gave these parameters\
>> %Linear model:\
   %  f(t) = v + g*0.5*t  %this is the equation I defined\
%Coefficients (with 95% confidence bounds): %this gives the range that the parameters will be found 95% of the %time\
%       v =       1.705  (1.683, 1.726)\
%       g =       9.722  (9.502, 9.942)\
%\
%Goodness of fit:\
%  SSE: 0.0002745\
%  R-square: 0.9997\
%  Adjusted R-square: 0.9997\
%  RMSE: 0.008284\
\
% SSE statistic is the least-squares error of the fit, with values closest to 0 indicating a best fit.\
% the R-square value is calculated by 1- (residual sum of squares/regression sum of squares), which are two \
% different measures of differences between the fit and actual data.  Values closer to 1 indicate better fits\
% adjusted R-square isn\'92t relevant in this case, it involves a correction for equations that have a high number of \
% variables\
% the RMSE is the square root of the mean of the square of total error.\
Variables have been created in the current workspace.\
>> v=1.705;	     % obtained fit v0\
>> g=9.722;	     % obtained g\
>> f=v+g*0.5*t;  % calculates the fit data points\
>> diff=y-f;\
>> diffsq=diff.^2;\
>> sqrt(0.25*sum(diffsq))    %calculates standard deviation\
\
ans =\
\
    0.0083\
\
>> % estimated standard deviation based on fit parameters 0.008\
>> %I jumped straight to Matab, and used the same curve fitting tool, but instead of a linear fit, I chose a custom equation, where I input the position equation.  I then ran the tool with the Levenberg-Marquardt algorithm to obtain similar values.  I did not have to specify the search range at all, the algorithm found a very good fit given -inf and +inf for each parameter.  Using this fit, g was determined to be 9.583 and v0=1.721}